//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherInitialInteractDistance;

    public static Entitas.IMatcher<GameEntity> InitialInteractDistance {
        get {
            if (_matcherInitialInteractDistance == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.InitialInteractDistance);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherInitialInteractDistance = matcher;
            }

            return _matcherInitialInteractDistance;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.InitialInteractDistance initialInteractDistance { get { return (Code.Gameplay.Features.InitialInteractDistance)GetComponent(GameComponentsLookup.InitialInteractDistance); } }
    public float InitialInteractDistance { get { return initialInteractDistance.Value; } }
    public bool hasInitialInteractDistance { get { return HasComponent(GameComponentsLookup.InitialInteractDistance); } }

    public GameEntity AddInitialInteractDistance(float newValue) {
        var index = GameComponentsLookup.InitialInteractDistance;
        var component = (Code.Gameplay.Features.InitialInteractDistance)CreateComponent(index, typeof(Code.Gameplay.Features.InitialInteractDistance));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceInitialInteractDistance(float newValue) {
        var index = GameComponentsLookup.InitialInteractDistance;
        var component = (Code.Gameplay.Features.InitialInteractDistance)CreateComponent(index, typeof(Code.Gameplay.Features.InitialInteractDistance));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveInitialInteractDistance() {
        RemoveComponent(GameComponentsLookup.InitialInteractDistance);
        return this;
    }
}
